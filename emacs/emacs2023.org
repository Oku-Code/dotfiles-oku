#+TITLE: Configuration file for GNU/Emacs
#+AUTHOR: Oku
#+DATE: <2023-07-14 Fri 10:33>
#+STARTUP: hideall
#+DESCRIPTION: Oku's new config file for emacs
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el
#+OPTIONS: toc:2

* Table of contents :toc:
- [[#emacs-configuration][Emacs configuration]]
- [[#basics][Basics]]
  - [[#welcome-message][Welcome message]]
  - [[#esc-with-quit-prompts][Esc with quit prompts]]
  - [[#removing-unnecesary-stuff-and-ui-enhancements][Removing unnecesary stuff and UI enhancements]]
  - [[#keybindings][Keybindings]]
- [[#packages][Packages]]
  - [[#elpaca-package-manager][Elpaca package manager]]
  - [[#use-package-enable-using-elpaca][Use-package enable using elpaca]]
  - [[#ivy][IVY]]
  - [[#ivy-rich][IVY rich]]
  - [[#ivy-all-the-icons][IVY all the icons]]
  - [[#ivy-presient][IVY presient]]
  - [[#counsel][Counsel]]
  - [[#sudo-edit][SUDO edit]]
- [[#themes-and-ui][Themes and UI]]
  - [[#dashboard][Dashboard]]
  - [[#doom-themes][Doom-themes]]
  - [[#which-key][Which-key]]
  - [[#places-where-you-dont-want-row-numbers][Places where you don't want row numbers]]
  - [[#rainbow-delimiters][Rainbow delimiters]]
  - [[#helpful][Helpful]]
  - [[#all-the-icons][All the icons]]
  - [[#font-configuration][Font configuration]]
- [[#org-mode][Org mode]]
  - [[#org-mode-1][Org mode]]
  - [[#table-of-contents][Table of contents]]
  - [[#org-bullets][Org bullets]]
  - [[#org-faces][Org faces]]
  - [[#auto-tangle][Auto tangle]]
  - [[#estructure-templates][Estructure templates]]
- [[#shells-and-terminals][Shells and terminals]]
  - [[#vterm][Vterm]]
  - [[#vterm-toggle][Vterm Toggle]]
- [[#emacs-ide][EMACS IDE]]
  - [[#projectile][Projectile]]
- [[#speeding-up-emacs][Speeding up emacs]]
  - [[#garbage-collector][Garbage collector]]
  - [[#no-littering][No littering]]
- [[#emacs-daemon][Emacs daemon]]
  - [[#check-the-os-you-are-currently-running][Check the os you are currently running]]
  - [[#check-if-confing-is-loading-in-daemon][Check if confing is loading in daemon]]
  - [[#configuring-the-ui-for-new-frames][Configuring the UI for new frames]]

* Emacs configuration

The second version of this configuration file, same principle but changing things thanks to
DT series, let's see how it goes and using elpaca package manager


* Basics

Let's start with the basics 

** Welcome message

Self descriptive

#+begin_src emacs-lisp
  ;; Quit startup message
  (setq inhibit-startup-message t)
#+end_src

** Esc with quit prompts

#+begin_src emacs-lisp
  ;; Set esc to quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

** Removing unnecesary stuff and UI enhancements

#+begin_src emacs-lisp
  ;; Nice looking emacs
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (set-fringe-mode -10)
  (menu-bar-mode -1)
  (setq visible-bell t)
  (setq use-short-answers t)
  (setq initial-frame-alist
    '((fullscreen . maximized)))
  ;; For emacs-client buffers
  (setq default-frame-alist
     '((fullscreen . maximized)))
#+end_src

** Keybindings

For general proporse and for have better bindings for emacs

#+begin_src emacs-lisp
;; Increase zoom
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src


* Packages

Make emacs more extensible with packages

** Elpaca package manager

#+begin_src emacs-lisp
  ;; Elpaca 
    (defvar elpaca-installer-version 0.5)
    (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
    (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
    (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
    (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                                :ref nil
                                :files (:defaults (:exclude "extensions"))
                                :build (:not elpaca--activate-package)))
    (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
         (build (expand-file-name "elpaca/" elpaca-builds-directory))
         (order (cdr elpaca-order))
         (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
          (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                   ((zerop (call-process "git" nil buffer t "clone"
                                         (plist-get order :repo) repo)))
                   ((zerop (call-process "git" nil buffer t "checkout"
                                         (or (plist-get order :ref) "--"))))
                   (emacs (concat invocation-directory invocation-name))
                   ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                         "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                   ((require 'elpaca))
                   ((elpaca-generate-autoloads "elpaca" repo)))
              (progn (message "%s" (buffer-string)) (kill-buffer buffer))
            (error "%s" (with-current-buffer buffer (buffer-string))))
        ((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))
#+end_src

** Use-package enable using elpaca

#+begin_src emacs-lisp
    ;; Install use-package support
  (elpaca elpaca-use-package
    ;; Enable :elpaca use-package keyword.
    (elpaca-use-package-mode)
    ;; Assume :elpaca t unless otherwise specified.
    (setq elpaca-use-package-by-default t))

  ;; Block until current queue processed.
  (elpaca-wait)

  ;;When installing a package which modifies a form used at the top-level
  ;;(e.g. a package which adds a use-package key word),
  ;;use `elpaca-wait' to block until that package has been installed/configured.
  ;;For example:
  ;;(use-package general :demand t)
  ;;(elpaca-wait)

  ;;Turns off elpaca-use-package-mode current declartion
  ;;Note this will cause the declaration to be interpreted immediately (not deferred).
  ;;Useful for configuring built-in emacs features.
  (use-package emacs :elpaca nil :config (setq ring-bell-function #'ignore))

  ;; Don't install anything. Defer execution of BODY
  ;; (elpaca nil (message "deferred"))
#+end_src

** IVY

#+begin_src emacs-lisp
  ;; MAIN PACKAGES
  ;; Ivy - for replace find command
  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
  	   :map ivy-minibuffer-map
  	   ("TAB" . ivy-alt-done)
  	   ("C-l" . ivy-alt-done)
  	   ("C-j" . ivy-next-line)
             ("C-k" . ivy-previous-line)
  	   :map ivy-switch-buffer-map
  	   ("C-k" . ivy-previous-line)
  	   ("C-l" . ivy-done)
  	   ("C-d" . ivy-switch-buffer-kill)
  	   :map ivy-reverse-i-search-map
  	   ("C-k" . ivy-previous-line)
  	   ("C-d" . ivy-reverse-i-search-kill))
     :config
     (message "Ivy loaded...")
     (ivy-mode 1)
     :custom
     (setq ivy-use-virtual-buffers t)
     (setq ivy-count-format "(%d/%d)")
     (setq enable-recursive-minibuffers t))
#+end_src

** IVY rich

#+begin_src emacs-lisp
  ;; Ivy rich for more info about commands on emacs
  (use-package ivy-rich
    :after ivy
    :init
    (ivy-rich-mode 1))
#+end_src

** IVY all the icons

#+begin_src emacs-lisp
  (use-package all-the-icons-ivy-rich
    :ensure t
    :init
    (all-the-icons-ivy-rich-mode 1))
#+end_src

** IVY presient

#+begin_src emacs-lisp
  ;;Ivy presient
  (use-package ivy-prescient
    :after counsel
    :custom
    (ivy-prescient-enable-filtering nil)
    :config
    (ivy-prescient-mode 1))
#+end_src

** Counsel

#+begin_src emacs-lisp
    ;;Counsel
    (use-package counsel
      :after ivy
      :bind (("M-x" . counsel-M-x)
    	   ("C-x b" . counsel-ibuffer)
    	   ("C-x C-f" . counsel-find-file)
    	   :map minibuffer-local-map
    	   ("C-x a" . counsel-minibuffer-history))
      :custom
      (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
      :config
      (message "Counsel Loaded...")
      (counsel-mode 1))
#+end_src

** SUDO edit

Easy way to edit files that requiries privileges

#+begin_src emacs-lisp
  (use-package sudo-edit
    :config
    (global-set-key (kbd "C-t") 'sudo-edit-find-file))
#+end_src


* Themes and UI

Time to rice 

** Dashboard

Scratch is pretty, but i like to have a nice welcome screen

#+begin_src emacs-lisp
  ;; Dashboard
  (use-package dashboard
    :ensure t
    :init
    (setq initial-buffer-choice 'dashboard-open)
    ;; Custom message title
    (setq dashboard-banner-logo-title "ヘカーティア ~ ( The emacs powerhouse )")
    ;; My beloved
    (setq dashboard-startup-banner "~/Pictures/ヘカーティア.png")
    (setq dashboard-center-content t)
    (setq dashboard-show-shortcut nil)
    (setq dashboard-items '((recents . 3)
                            (agenda . 2)
                            (projects . 1)))
    (setq dashboard-set-footer nil)
    (setq dashboard-set-info-init t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-set-heading-icons t)
    ;; Format: "(icon title help action face prefix suffix)"
    (setq dashboard-set-navigator t)
    :config
    (dashboard-setup-startup-hook))

#+end_src

** Doom-themes

If you aren't sure what colors do you want

#+begin_src emacs-lisp
  ;; Doom Themes
  (use-package doom-themes
    :ensure t
    :config
    (setq doom-themes-enable-bold t
  	  doom-themes-enable-italic t)
    (doom-themes-org-config)
    ;; Scheduling themes acording time zone
    (let ((hour (string-to-number (substring (current-time-string) 11 13))))
      (if (or ( > hour 19 ) (< hour 7))
        ;; Light theme
        (load-theme 'doom-Iosvkem)
        ;; Dark Theme
        (load-theme 'doom-one-light))))
#+end_src

** Which-key

Emacs has so many keybindings, so it's better to know how those work

#+begin_src emacs-lisp
        ;; Which key package
      (use-package which-key
          :defer 0
          :init
          (which-key-mode 1)
          :diminish which-key-mode
          :config
          (setq which-key-idle-delay 0.5
      	  which-key-separator " -> "
    	  which-key-sort-order #'which-key-key-order-alpha
  	  ))
#+end_src

** Places where you don't want row numbers

#+begin_src emacs-lisp
  ;; Enable number row
  (column-number-mode)
  (global-display-line-numbers-mode)

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  eshell-mode-hook
  		vterm-mode-hook
                  markdown-mode-hook
                  org-agenda-mode-hook
                  agenda-command-mode-hook
                  calendar-mode-hook
                  cargo-run-mode-hook
                  dired-mode-hook
                  info-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Rainbow delimiters

#+begin_src emacs-lisp
  ;; Rainbow mode
  (use-package rainbow-mode
    :hook org-mode prog-mode)
  ;; Use delimiter rainbow
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Helpful

Really helpful to describe what all this things do.

#+begin_src emacs-lisp
;; Helpful package
(use-package helpful
  :commands (helpful-callable helpful-variable helpful-command helpful-key)
  :custom
  (counsel-describe-function-funtion #'helpful-callable)
  (counsel-describe-variable-funtion #'helpful-variable)
  :bind
  ([remap describe-command] . helpful-command)
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . heplful-key))
#+end_src

** All the icons

For things related to icons, such as dired, ivy and others

#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure t
    :if (display-graphic-p))

  (use-package all-the-icons-dired
    :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src

** Font configuration

Defaults fonts aren't cool, better a custom one

#+begin_src emacs-lisp
  ;; Font Config -> Family
  ;;(set-frame-font "Iosevka:size=14" nil t)
  (set-face-attribute
   'default nil
   :font "Iosevka :antialias=subpixel"
   :height 110)
  ;;Set fixed face ->
  (set-face-attribute
   'fixed-pitch nil
   :font "Iosevka"
   :weight 'medium
   :height 130)
  ;; Set variable face -> src-blocks
  (set-face-attribute
   'variable-pitch nil
   :font "Iosevka"
   :weight 'regular
   :height 130)
  ;; Set font for comments
  (set-face-attribute 'font-lock-comment-face nil
		      :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil
		      :slant 'italic)

  ;; Using the correct fonts in emacsclient
  (add-to-list 'default-frame-alist '(font . "Iosevka"))
  (add-to-list 'initial-frame-alist '(font . "Iosevka"))

  (use-package mixed-pitch
    :defer t
    :config
    (setq mixed-pitch-set-height nil)
    (dolist (face'(org-date org-priority org-tag org-special-keyword))
      (add-to-list 'mixed-pitch-fixed-pitch-faces face)))
#+end_src


* Org mode

The killer feature of emacs and one of the best tools for organize your life

** Org mode

#+begin_src emacs-lisp
  ;; Org mode
  (defun ogm/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (use-package org
    :commands (org-agenda)
    :hook (org-mode . ogm/org-mode-setup)
    :config
    (setq org-ellipsis " ▾"
  	  org-hide-emphasis-makers t))

  ;; Org agenda
  (setq org-agenda-start-with-log-mode t)
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)
  (setq org-todo-keywords
  	'((sequence "TODO(t)" "NEXT(n)" "PENDING(p)" "|" "DONE(d)")))

  ;; Disable electric indent
  (electric-indent-mode -1)
#+end_src

** Table of contents

Important to have a table of contents for all org files included this config

#+begin_src emacs-lisp
  (use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Org bullets

Nice heading bullets

#+begin_src emacs-lisp
;;Org Bullets
(use-package org-bullets
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

** Org faces

Better rendering fonts in org-mode

#+begin_src emacs-lisp
  ;; Correct heading font
  (require 'org-faces)
  (with-eval-after-load 'org-faces
    (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.1)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.0)
                  (org-level-6 . 1.0)
                  (org-level-7 . 1.0)
                  (org-level-8 . 1.0)))
    (set-face-attribute (car face) nil :font "Iosevka" :weight 'bold :height (cdr face)))
  
;; Ensure the correct fonts for the ORGMODE
(set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
(set-face-attribute 'org-code nil :inherit '(shadow fixed-pitch))
(set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
(set-face-attribute 'org-table nil :inherit 'fixed-pitch)
(set-face-attribute 'org-special-keyword nil :inherit'(font-lock-comment-face fixed-pitch))
(set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
(set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))
#+end_src

** Auto tangle

This is for write the config file after save it, you need to add the properties tag at the beggining of the file

#+begin_src emacs-lisp
  ;; Auto-tangle 
  (defun ogm/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/dotfiles-oku/emacs2023.org"))
      ;;Dinamic Scoping
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'ogm/org-babel-tangle-config)))
#+end_src

** Estructure templates

Org tempo allows to create src blocks without write the entire thing here we have examples

| Typing source + TAB key | Result          |
| <a                      | #+begin_export  |
| <c                      | #+begin_center  |
| <C                      | #+begin_comment |
| <e                      | #+begin_example |
| <s                      | #+begin_src     |

#+begin_src emacs-lisp
;; Estructure templates
(with-eval-after-load 'org
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("sh". "src shell"))
  (add-to-list 'org-structure-template-alist '("el". "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py". "src python"))
  (add-to-list 'org-structure-template-alist '("rs". "src rust")))
#+end_src


* Shells and terminals

** Vterm

Vterm is an terminal emulator for emacs

#+begin_src emacs-lisp
  (use-package vterm
    :config
    (setq shell-file-name "/bin/bash"
  	vterm-max-scrollback 500))
#+end_src

** Vterm Toggle

Toggle the vterm terminal and your buffer are you in

#+begin_src emacs-lisp
  (use-package vterm-toggle
    :after vterm
    :config
    (setq vterm-toggle-fullscreen-p nil)
    (setq vterm-toggle-scope 'project)
    (add-to-list 'display-buffer-alist
  	       '((lambda (buffer-or-name _)
  		   (let ((buffer (get-buffer buffer-or-name)))
  		     (with-current-buffer buffer
  		       (or (equal major-mode 'vterm-mode)
  			   (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
  		 (display-buffer-reuse-window display-buffer-at-bottom)
  		 (reusable-frames . visible)
  		 (window-height . 0.3))))
#+end_src


* EMACS IDE

Set of tools to setup in order to have a decent IDE

** Projectile

Projectile is a project interaction library for emacs, manage projects as developer with *git*

#+begin_src emacs-lisp
;; Setup projectile
(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  (when (file-directory-p "~/Documents")
    (setq projectile-project-search-path '("~/Documents")))
  (setq projectile-switch-project-action #'projectile-dired))
#+end_src


* Speeding up emacs

With all this packages and configurations emacs became slow when you start using it.

** Garbage collector

Important to have emacs clean 

#+begin_src emacs-lisp
  ;;SPEEDING UP EMACS
  ;;Garbage collections things
  (setq gc-cons-threshold (* 2 1000 1000))

  (defun efs/display-startup-time()
    (message "Emacs loaded in %s with %d garbage collections"
             (format "%.2f seconds"
                     (float-time (time-subtract after-init-time before-init-time)))
             gcs-done))

  (add-hook 'emacs-startup-hook #'efs/display-startup-time)

  ;; Adding a garbage collection package
  (use-package gcmh
    :diminish gcmh-mode
    :config
    (setq gcmh-idle-delay 5
          gcmh-high-cons-threshold (* 16 1024 1024))
    (gcmh-mode 1))

  (defun gcmh/display-startup-time()
    (lambda ()
      (setq gc-cons-porcentage 0.1)))

  (add-hook 'emacs-startup-hook #'gcmh/display-startup-time)
#+end_src

** No littering

To have a better cleaning in the files

#+begin_src emacs-lisp
  ;; No-littering
  (use-package no-littering)
#+end_src


* Emacs daemon

** Check the os you are currently running

#+begin_src emacs-lisp
  (pcase system-type
    ('gnu/linux "Linux")
    ('windows-nt "Windows")
    ('darwin "MacOS"))
#+end_src

** Check if confing is loading in daemon

#+begin_src emacs-lisp
  (if (daemonp)
      (message "Loading the daemon!")
      (message "Loading in regular emacs"))
#+end_src

** Configuring the UI for new frames

#+begin_src emacs-lisp
  (defun efs/set-font-faces ()
    (message "Setting faces")
      (set-face-attribute
       'default nil
       :font "Iosevka :antialias=subpixel"
       :height 110)
      ;;Set fixed face 
      (set-face-attribute
       'fixed-pitch nil
       :font "Iosevka"
       :weight 'medium
       :height 130)
      ;; Set variable face -> src-blocks
      (set-face-attribute
       'variable-pitch nil
       :font "Iosevka"
       :weight 'regular
       :height 130)

      ;; Set font for comments
      (set-face-attribute 'font-lock-comment-face nil
  			:slant 'italic)
      (set-face-attribute 'font-lock-keyword-face nil
  			:slant 'italic))

  (if (daemonp)
      (add-hook 'after-make-frame-functions
  		(lambda (frame)
  		  (with-selected-frame frame
  		    (efs/set-font-faces))))
    (efs/set-font-faces))
#+end_src


